/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.allamiibo;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import com.google.gson.Gson;
import java.awt.Font;
import java.io.*;
import java.net.*;
import javax.net.ssl.HttpsURLConnection;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import java.awt.Image;
import javax.swing.UIManager;
import javax.swing.JOptionPane;


/**
 *
 * @author Edwar
 */
public class AllAmiibo extends javax.swing.JFrame {
    private AmiiboCollection collectionWindow; //for new collection window
    public AllAmiibo allAmiiboWindow; //this window
    
    private ArrayList<Amiibo> amiibo; //for all amiibos
    private ArrayList<Amiibo> collectionAmiibos; // for inven amiibos
    private ArrayList<Amiibo> searchedAmiibo; //for sorting out amiibos
    
    private DefaultListModel model; //for all game items
    private DefaultListModel collectionModel; //for inven items

    private Image image; //holds image for JLabel
    
    int pictureLabelHeight; //ensures uniform picture height
    int pictureLabelWidth; //ensures uniform picture width
    /**
     * Creates new form Inventory
     */
    public AllAmiibo(ArrayList<Amiibo> setterList) {
        initComponents();
        
        //public Amiibo (String character, String amiiboSeries, String gameSeries, String image)
        amiibo = setterList;
        
        searchedAmiibo = new ArrayList<Amiibo>();
        
        for(int i = 0; i < amiibo.size(); i++){
            searchedAmiibo.add(amiibo.get(i));
        }
        
        model = new DefaultListModel();
        
        for(Amiibo amiibo : amiibo){
            model.addElement(amiibo.getName());
        }
        
        AllAmiiboJList.setModel(model);
        
        collectionAmiibos = new ArrayList<Amiibo>();
        collectionModel = new DefaultListModel();
        
        collectionWindow = new AmiiboCollection(this);
        collectionWindow.setAllAmiiboDisplay(this);
        
        pictureLabelWidth = pictureLabel.getWidth();
        pictureLabelHeight = pictureLabel.getHeight();
        
        
        /*
        https://stackoverflow.com/questions/27016675/setting-the-font-of-a-jtextarea
        */
        Font font = new Font(amiiboDescription.getFont().getFontName(), Font.PLAIN, 13);
        
        amiiboDescription.setFont(font);
    }
    
    public ArrayList<Amiibo> getCollectionList(){ //gets collectionList for Collection window
        return collectionAmiibos;
    }
    
    public DefaultListModel getCollectionModel(){ //gets collectionModel for Collection window
        return collectionModel;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AllAmiiboJList = new javax.swing.JList<>();
        addToCollection = new javax.swing.JButton();
        viewCollection = new javax.swing.JButton();
        pictureLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        amiiboDescription = new javax.swing.JTextArea();
        chooseBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("All Amiibos");
        setResizable(false);

        AllAmiiboJList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AllAmiiboJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        AllAmiiboJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                AllAmiiboJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(AllAmiiboJList);

        addToCollection.setText("Add to Collection");
        addToCollection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCollectionActionPerformed(evt);
            }
        });

        viewCollection.setText("View Collection");
        viewCollection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCollectionActionPerformed(evt);
            }
        });

        pictureLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        amiiboDescription.setColumns(20);
        amiiboDescription.setRows(5);
        jScrollPane2.setViewportView(amiiboDescription);

        chooseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Game Series", "Amiibo Series", "Character" }));
        chooseBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseBoxActionPerformed(evt);
            }
        });

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search Amiibo");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chooseBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addToCollection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewCollection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addToCollection)
                        .addGap(18, 18, 18)
                        .addComponent(viewCollection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chooseBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(searchButton))
                    .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addToCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCollectionActionPerformed
        // will add currently selected amiibo to Inventory screen
        JOptionPane.showMessageDialog(null, searchedAmiibo.get(AllAmiiboJList.getSelectedIndex()).getName() + " has been added to the inventory.", "Amiibo Added", JOptionPane.INFORMATION_MESSAGE);
        collectionAmiibos.add(searchedAmiibo.get(AllAmiiboJList.getSelectedIndex()));
        collectionModel.addElement(searchedAmiibo.get(AllAmiiboJList.getSelectedIndex()).getName()); //does add
        collectionWindow.setCollectionList(collectionAmiibos);
        collectionWindow.setCollectionModel(collectionModel);
    }//GEN-LAST:event_addToCollectionActionPerformed

    private void viewCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCollectionActionPerformed
        collectionWindow.setVisible(true);
    }//GEN-LAST:event_viewCollectionActionPerformed
    
    private void AllAmiiboJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_AllAmiiboJListValueChanged
        // changes picture and description based off of currently selected JList Amiibo
        
        /*
        https://www.tutorialspoint.com/java-program-to-set-jtextarea-to-wrap-by-word-in-java
        Used for word wrapping in JTextArea
        */
        try {
            URL imgUrl = new URL(searchedAmiibo.get(AllAmiiboJList.getSelectedIndex()).getImage());
            image = ImageIO.read(imgUrl);
            image = image.getScaledInstance(pictureLabelWidth, pictureLabelHeight, Image.SCALE_SMOOTH);
            ImageIcon labelIcon = new ImageIcon(image);
            pictureLabel.setIcon(labelIcon);
            amiiboDescription.setLineWrap(true);
            amiiboDescription.setWrapStyleWord(true);
            amiiboDescription.setText((searchedAmiibo.get(AllAmiiboJList.getSelectedIndex()).getInfo()));
        } catch (IOException e){
            System.out.println("Error getting image");
        } catch (IndexOutOfBoundsException e){}
    }//GEN-LAST:event_AllAmiiboJListValueChanged

    private void chooseBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_chooseBoxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // searches through All Amiibo list to all Amiibo that meet criteria
        
        String boxChoice = chooseBox.getSelectedItem().toString();
        String sortText = searchField.getText().toLowerCase();
        
        searchedAmiibo.clear();
        model.clear();
        
        try{
        
            if (boxChoice.equals("Character")){
                for(int i = 0; i < amiibo.size(); i++){
                    if(amiibo.get(i).getCharacter().toLowerCase().contains(sortText)){
                        searchedAmiibo.add(amiibo.get(i));
                        model.addElement(amiibo.get(i).getName());
                    }
                }
            }

            else if (boxChoice.equals("Game Series")){
                for(int i = 0; i < amiibo.size(); i++){
                    if(amiibo.get(i).getGameSeries().toLowerCase().contains(sortText)){
                        searchedAmiibo.add(amiibo.get(i));
                        model.addElement(amiibo.get(i).getName());
                    }
                }
            }

            else if (boxChoice.equals("Amiibo Series")){
                for(int i = 0; i < amiibo.size(); i++){
                    if(amiibo.get(i).getAmiiboSeries().toLowerCase().contains(sortText)){
                        searchedAmiibo.add(amiibo.get(i));
                        model.addElement(amiibo.get(i).getName());
                    }
                }
            }

            else{
                for(int i = 0; i < amiibo.size(); i++){
                    searchedAmiibo.add(amiibo.get(i));
                    model.addElement(amiibo.get(i).getName());
                }
            }
            AllAmiiboJList.setModel(model);
        } catch (IndexOutOfBoundsException e){}
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllAmiibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllAmiibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllAmiibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllAmiibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /*
        Code based off of code by Ryan Dzengelewski

        */
        try
            { UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() ); }
        catch ( Exception e )
            { System.err.println( e ); }
        
        Gson gson = new Gson();
        
        //sets up data that is sent to AmiiboDisplay
        try{
            URL url = new URL("https://www.amiiboapi.com/api/amiibo/");
            HttpsURLConnection connection = (HttpsURLConnection)url.openConnection();
            BufferedReader input = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            
            AmiiboList jsonList= gson.fromJson(input, AmiiboList.class);
            
            /* Create and display the form */
            AllAmiibo AmiiboDisplay = new AllAmiibo(jsonList.getAmiiboList());
            
            AmiiboDisplay.setVisible(true);
        } catch (MalformedURLException ex){
            System.out.println("Could not retrieve URL");
        } catch (IOException ex){
            System.out.println("Error launching Amiibo Collection Tracker, unable to connect to API.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AllAmiiboJList;
    private javax.swing.JButton addToCollection;
    private javax.swing.JTextArea amiiboDescription;
    private javax.swing.JComboBox<String> chooseBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton viewCollection;
    // End of variables declaration//GEN-END:variables
}
